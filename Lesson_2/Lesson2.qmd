---
title: "Lesson 2: Reproducible workflows with Quarto & Github"
author: "Hannah Metzler"
date: "March 6 2023"
format: 
  html:
    toc: true # generate a table of content
    number-sections: true
    df-print: kable
editor: visual
cache: true
execute: 
  warning: false
echo: true
---

## Quick repetition of Lesson 1

- Assigning numeric values or strings to objects, then using the objects:

```{r}
x <- 5
y <- "string"
x*2
print(y)
```

- Using whitespaces to organize your code
- Removing objects in the environment

```{r}
rm(list = ls())
```

- Functions & arguments

```{r}
rnorm(20, mean = 100, sd = 10)
```

- Function help

```{r}
?rnorm
```

- Installing & loading packages
```{r}
# install.packages("tidyverse")
library(tidyverse)
```

## Goals for lesson 2

- Commit to Git
- Push to GitHub
- Organize a project (folder, files, R-project)
- Read in & manipulate data
- Make a figure & save it to PDF
- Create a Quarto document


## File system of your PC

Before we create our first R-project, we need to talk about how the file system and file paths on your PC work, and how you navigate your way through it. 

### File system & paths

- Your user accounts' main directory: `/Users/UserName/`
    - `~` shortcut for it
- A file on your Desktop: `/Users/UserName/Desktop/datafile.csv`
  - Using the shortcut `~/Desktop/datafile.csv`
- I find it useful to have all my analysis projects in a common folder directly in my user folder: `~/AnalysisProjects/`
- You can navigate to directory's via the Terminal (Shell, Console) using commands like:
  - `cd` change directory
  - `..` move one directory upwards
  - `/` to divide subfolders: `directory/subdirectory/`
- You can access the Terminal from within R-studio (next to the Console). 

```{r, echo = FALSE}
knitr::include_graphics('images/Terminal_in_Rstudio.png')
```


### Working Directory

- Folder of the project you are currently working on
- Never change working directory in a script
- Your scripts should only reference three types of locations: 

| Where | Example |
|-------|---------|
| on the web               | "https://hannahmetzler.eu/R_intro/Lesson_2/data/datafile.csv" |
| in the working directory | "datafile.csv" |
| in a subdirectory        | "data/datafile.csv" |

- Typing `pwd` (print working directory) in the Terminal shows you the directory you are currently in. 

:::{.callout-caution}
#### Exercise
- In Rstudio, go to the `Terminal` 
- Check which directory you are in
- Navigate to your user directory
- Move back up one folder 
- Move back to your user directory using the shortcut
:::

## R-projects

- Useful to organize your coding projects
- Group all files of a project in a directory
- Allows using Git for version control
- R-project automatically sets working directory to the R-project folder

This is how an R-project file (the one I use for preparing my course materials) looks like: 

```{r, echo=FALSE}
knitr::include_graphics('images/R_project.png')
```

- In the top right corner in Rstudio, you can see that we are not currently in any project. 
- Let's create our first project: 

::: {.callout-caution}
#### Exercise
1.   Open a New Project in Rstudio: Choose `Create a project...` under the `File` menu and check `Create a git repository`
```{r, echo=FALSE}
knitr::include_graphics('images/new_project.png')
```
2. Choose `Existing Directory`
3. Use `Browse` to navigate to our folder `R_introduction` and click `Create Project`
```{r, echo=FALSE}
knitr::include_graphics('images/create_project_from_existing_directory.png')
```
:::

From now on, you can double click this .Rproject file in your `R_introduction` folder to directly open Rstudio in this folder. 

We can now back up our first to a "remote repository" on GitHub. 

## Git & GitHub

- Backup, version control & collaboration
- Did setup work for all of you?
- We cover the absolute basics here, for more: <http://happygitwithr.com/>
- Committing: creating a named version on your PC
- Pushing: Uploading to GitHub

```{r echo=FALSE}
knitr::include_graphics('../Lesson_1/images/how_git_works.svg')
```

We will now create a remote repository on Github, copy it to our local PCs, and then continue Lesson 2 in that local repository (=directory/folder). 

### Create a remote git repository

- On <https://github.com/> click on `New` on the top left.
- As shown in the screenshot below: 
  - Name the repository
  - Make it private
  - Add a README file
  - Choose the template R for the .gitignore file
  - (No License needed)
  - Click `Create repository`: 

```{r echo=FALSE}
knitr::include_graphics('images/create_repo.png')
```

- `README.md`: where you describe the project (folder structure, content, etc.)
- `.gitignore`: Hidden file that tells Git what not to upload to GitHub (e.g., figures)

### Clone the remote Git Repository to your laptop

1. Copy the SSH link of your repository (for connecting it to Rstudio):

```{r echo=FALSE}
knitr::include_graphics('images/copy_SSH_repo_link.png')
```

2. In Rstudio, in the Terminal:
  - Navigate to the directory where you want the R_introduction folder using `cd`. (I want it in my folder `AnalysisProjects`)
  - `git clone` and paste your repository link: 

```{r echo=FALSE}
knitr::include_graphics('images/git_clone.png')
```

There is now a folder with the name of the remote repository in the directory you "cloned" it to. (For me, in the `AnalysisProjects/` folder.)

### Commit to Git

1. Click on `Git` in the upper right pane. 
2. You see 2 files to commit: 

```{r echo=FALSE}
knitr::include_graphics('images/files_for_commit.png')
```

3. Add them to git by checking the box
4. Click commit

```{r echo=FALSE}
knitr::include_graphics('images/add_commit_files.png')
```

5. Write a commit message (describe what the commit contains)
6. Click Commit again

```{r echo=FALSE}
knitr::include_graphics('images/commit_message.png')
```
### Push to Git




## Organizing a project

### Useful folder structure:

```{r, echo=FALSE}
#| fig-width: 2
knitr::include_graphics('images/folder_structure.png')
```

:::{.callout-caution}
#### Exercise
What is the file path for an imaginary `datafile.csv` in the data folder above?
:::

-   Alternative output folder names could be: 
    - write_up
    - tables
    - reports
    - or several of those
-   Data: I recommend having a separate folder for the raw data
-   Plus any other project specific folders
-   The Quarto file (File.qmd) is the starting point to lead through the analyses: it calls other scripts in the order required (e.g., a cleaning script, a figures script, etc.)

::: {.callout-caution}
#### Exercise
-   Make a directory for this class: "R_introduction"
-   In it, create a sub-folder for "Lesson_2", with further sub-folders:
    -   data
    -   code
    -   figures
    -   write-up
:::



### File names

- Use names that work well for computers & people
- No spaces
-   be consistent with capitalisation (set a rule to make it easy to remember, like always use lowercase)
- A full stop only before the file extension `data_file.csv`
-   use underscores (`_`) to separate parts of the file name, and dashes (`-`) to separate words in a section `"data_questionnaire_2021-11-15.xls"`
-   prefix a filename with an underscore to move it to the top of the list, or prefix all files with numbers to control their order
-   use YYYY-MM-DD format for dates so they sort in chronological order

#### Bad examples

-   `Data (Participants) 11-15.xls`
-   `final report2.doc`
-   `Participants Data Nov 12.xls`
-   `project notes.txt`
-   `Questionnaire Data November 15.xls`
-   `report final.doc`
-   `report final 2.doc`

#### Good examples

-   `_project-notes.txt`
-   `data_participants_2021-11-12.xls`
-   `data_participants_2021-11-15.xls`
-   `report_v1.doc`
-   `report_v2.doc`
-   `report_v3.doc`


## To cover: 
-   Quarto language basics
-   Including a code junk
-   Commit/push your code

## References

This lesson is based on: 
- Chapter 2 of: Lisa DeBruine & Dale Barr. (2022). [Data Skills for Reproducible Research](https://psyteachr.github.io/reprores-v3/intro.html): (3.0) Zenodo. doi:10.5281/zenodo.6527194. 
- Page Piccinini, R-Course, [Lesson 1: R Basics](https://pagepiccinini.com/r-course/lesson-1-r-basics/). 
