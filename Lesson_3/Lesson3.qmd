---
title: "Lesson 3: "
subtitle: "Course website: https://hannahmetzler.eu/R_intro/"
author: "Hannah Metzler"
date: "March 20 2024"
format: 
  html:
    toc: true # generate a table of content
    number-sections: true
    df-print: kable
editor: visual
cache: true
execute: 
  warning: false
echo: true
---

```{r, load packages, echo=F}
library(cowplot)
```

## Goals

-   Repeat setting up your work space with R-Projects, Git & GitHub
-   Repeat the math behind linear regression
-   Make a linear regression data
-   Run a linear regression
-   Summarise results in a Quarto Document

## Set up your work space

1.  Make a remote git repository on GitHub (e.g. “rintro_lesson3”)

2.  Copy the SSH Link

3.  In the Terminal, navigate to your folder for this R course using `cd`.

4.  Type `git clone` and paste your SSH link.

5.  In the now local folder of the repository, create sub folders (e.g. “data”, “figures”, “code”, “write_up”).

6.  Put the [data file](https://github.com/hannahmetzler/R_intro_lesson3/blob/main/data/rcourse_lesson2_data.txt) for this lesson in your “data” folder.

7.  Make a new R Project based in your main directory folder (e.g. “rintro_lesson3”).

8.  Commit & Push to GitHub.

<!-- ## Math of linear regression -->

<!-- ```{r, read data, echo = F} -->

<!-- #ChickWeight dataset -->

<!-- data(package = "datasets", ChickWeight) -->

<!-- data = ChickWeight -->

<!-- ``` -->

<!-- * Link to [Slides](https://pagepiccinini.files.wordpress.com/2016/02/rcourse_lesson2.pdf) -->

## Project for Lesson 3

Data from the USA Social Security Administration on baby names

**2 Questions:**

1.  Continuous Predictor: Does the name "Page" get more or less popular between the years of 1901 and 2000?
2.  Categorical Predictor: Is the name "Page" more or less popular with females or males?

## Organizing your scripts

-   Separate scripts for each step can be useful, we will use this structure today:
    -   cleaning
    -   figures
    -   statistics
-   Alternatively, these can be sections in a Quarto Document.

::: callout-caution
#### To do

Create a script and save it in the `code` folder as `01_cleaning.R`.
:::

## Cleaning script

-   Start again with a header (# TITLE ####) for loading packages.
-   We only need the package `dplyr` for now.
-   Shortcut to run a line of code from a script: `Ctrl/Strg/Cmd + Enter`

```{r}
## LOAD PACKAGES ####
library(dplyr)
```

-   Next, we read in data, with the same function as last time but for .txt files.
-   The argument col_types defines what kind of variables.

```{r}
data = readr::read_tsv("data/lesson2_data_babynames.txt")
```

To check if the file was read correctly you can use `head(data)` in the Console.

```{r}
head(data)
```

-   Check if your own name exists in the dataset using the function `filter()`:
    -   Check the function in the help: `?dplyr::filter` (Description, Usage & Examples).
        -   The first argument is for the dataframe.
        -   The second argument (`...`) is for the expression that defines our condition for rows we want to keep.
        -   The Examples section shows you how to use the function.
-   I'll be using the name "Page" - in honor of the colleague who taught me R with exactly this same data set.

```{r}
data_clean = dplyr::filter(data, name == "Page")
```

Check if it worked, for example using `head()` on the new data frame

```{r}
head(data_clean)
```

If this is empty, your name does not exist in the US names data set. Simply stay with the name "Page".

```{r, results = F}
dplyr::filter(data, name == "Lav")
```

```{r, echo=FALSE, fig.width=20}
knitr::include_graphics('images/empty_tibble.jpg')
```

-   Now, we'll use the same code to assign only rows with your name to the data frame `data_clean`.
-   We want to be able to run more functions to clean the data. We can do this using the **Pipe (%\>%)** after data. `filter()` will then be run on `data` before assigning to `data_clean`.
    -   Shortcut: `Shift + Ctrl/Cmd + M`
-   Copy and run the code below.
-   To use something different, I check if it worked with `xtabs()` this time.

```{r}
## CLEAN DATA ####
data_clean = data %>%
             filter(name == "Page")
xtabs(~name, data_clean)
```

We only want to look at the 20th century, so we filter out the years between 1900 and 2000 using the `filter()` function:

-   The first new filter call selects all years after 1900, the second all years up to and including 2000.

```{r, results = FALSE}
data_clean = data %>%
             filter(name == "Page") %>%
             filter(year > 1900) %>%
             filter(year <= 2000)
```

To confirm this worked, we can check the minimum and maximum year in the new data frame. For the name "Page", this shows the first year in which it was given to a baby was 1909.

```{r}
min(data_clean$year)
max(data_clean$year)
```

::: callout-caution
#### To do

-   Save the cleaning script.
-   Commit the changes to Git. The commit message could be "Made cleaning script".
-   Open a new script `02_figures.R`
:::

## Figures Script

We'll learn a new function now: `source()` tells R to run another script.

-   We can use it to run the cleaning script from our figures script, to read in our clean data.

```{r, eval = F, results = F}
## READ IN DATA ####
source("code/01_cleaning.R")
```

-   Enter the exact path and name of your script.
-   To be sure it works, first delete all objects from the **Environment** (broom symbol or `rm(list = ls)`)

All variables should now reappear in your Environment:

```{r, echo=F}
knitr::include_graphics('images/source_environment.png')
```

Now load all packages not yet loaded in the cleaning script. We need ggplot2 to make a figure.

```{r}
## LOAD PACKAGES ####
library(ggplot2)
```

We may want to change names or levels of variables a bit for our figures. It's good to create an extra data set for this:

```{r}
## ORGANIZE DATA ####
data_figs = data_clean
```

### Checking for normal distribution: Histogram

To run a linear regression, our dependent variable needs to be normally distributed. A perfect normal distribution is symmetrical, for example, here 2 distributions with n = 1 million observations: 

```{r, echo=F, fig.height=3.5}
data_normal = data.frame(narrow = rnorm(1000000), broad = rnorm(1000000, mean = 0, sd = 3))
p1 = ggplot(data_normal, aes(x = narrow)) +
            geom_histogram(aes(y=..density..))+
  geom_density(colour = "blue")+
  geom_vline(aes(xintercept=0), colour="blue", linetype="dashed")+
  xlim(c(-10, 10))

p2 = ggplot(data_normal, aes(x = broad)) +
            geom_histogram(aes(y=..density..))+
  geom_density(colour = "blue")+
  geom_vline(aes(xintercept=0), colour="blue", linetype="dashed")+
  xlim(c(-10, 10))
plot_grid(p1, p2)
```

- With less observations, the shape will be less perfect, but still roughly symmetrical (n = 100) with most values around the mean: 

```{r, echo=F, fig.height=3.5}
data_normal = data.frame(narrow = rnorm(100), broad = rnorm(100, mean = 0, sd = 3))
p1 = ggplot(data_normal, aes(x = narrow)) +
            geom_histogram(aes(y=..density..))+
  geom_density(colour = "blue")+
  geom_vline(aes(xintercept=0), colour="blue", linetype="dashed")+
  xlim(c(-10, 10))

p2 = ggplot(data_normal, aes(x = broad)) +
            geom_histogram(aes(y=..density..))+
  geom_density(colour = "blue")+
  geom_vline(aes(xintercept=0), colour="blue", linetype="dashed")+
  xlim(c(-10, 10))
plot_grid(p1, p2)
```

Let's check the distribution of our dependent variable with a histogram:

```{r, fig.asp=1, fig.width=3}
## MAKE FIGURES ####
# Histogram of dependent variable (proportion of 'Page's)
name.plot = ggplot(data_figs, aes(x = prop)) +
            geom_histogram()
name.plot
```

-   Proportion of babies with the name "Page" is clearly not normally distributed.
-   Note that aes() only needs an x-variable for histograms, because we plot only one variable.
-   Information message about bins: R picks one by default, but notifies you that you can enter a better one, as the binwidth can really change the shape of a distribution.

```{r, fig.asp=1, fig.width=3}
# Histogram with specific binwidth
ggplot(data_figs, aes(x = prop)) +
            geom_histogram(binwidth = 0.0000005)
```

-   One usual way of making data normal is a log transformation. In R, you can take the logarithm with base 10 with `log10()`.
-   Go back to the cleaning script to do the log transform. To make any transformation to a variable, we can use `mutate()` from dplyr. `mutate()` is used to make a new column or change an existing one.

```{r, results = FALSE}
data_clean = data %>%
  filter(name == "Page") %>%
  filter(year > 1900) %>%
  filter(year <= 2000) %>% 
  mutate(prop_log10 = log10(prop))
```

```{r, echo=F}
data_figs = data_clean
```

-   Run this code block, or save the script and rerun `source()` in the figures script.
-   Rerun the line to make the "data_figs" data frame.
-   Now let's have a look at the distribution again:

```{r, fig.asp=1, fig.width=3.5}
# Histogram of log transformed dependent variable (proportion of 'Page's)
name_log10.plot = ggplot(data_figs, aes(x = prop_log10)) +
            geom_histogram()
name_log10.plot
```

This distribution is more or less normal. We can go ahead and focus on figures for the regression.

### Continuous predictor: Scatter plot

1.  question: How did the popularity of the name, “Page” change over time?

-   Which 2 variables do we need to plot?

-   To make a scatter plot: `geom_point()`

-   To add a regression line: `geom_smooth()` with the method set to `lm`.

```{r, fig.asp=1, fig.width=3.5}
# Proportion of 'Page's by year (continuous predictor)
year.plot = ggplot(data_figs, aes(x = year, y = prop_log10)) +
            geom_point() +
            geom_smooth(method="lm")
year.plot
```

-   Is there an effect of year on time?

-   To save the figure to a file, you can use `ggsave()` like in Lesson 2.

    ```{r, eval = F}
    # save the plot
    ggsave('figures/scatterplot_proportion_year.pdf', dpi = 300)
    ```

### Categorical predictor: Boxplot

-   Now let's make a figure for the 2. question: Is there a sex difference in popularity of the name?

    -   We will use a boxplot for this. Which variable should be on the x and y axis?

```{r, fig.asp=1, fig.width=3.5}
# Proportion of 'Page's by sex (categorical predictor)
sex.plot = ggplot(data_figs, aes(x = sex, y = prop_log10)) +
geom_boxplot()
sex.plot
```

-   You might want more explicit labels for "F" and "M" in a figure. We can update the code to create data_figs data frame at the top of our script.
-   We'll use `mutate()` to change the names of the variable levels of the variable sex.
-   We'll use `factor()`, a function to make categorical variables with labels. The arguments we need are:
    -   levels: "an optional vector of the unique values (as character strings) that x might have taken" (from Help)
    -   labels: "an optional character vector of labels for the levels"
-   What is a vector? A list of items of the same type (e.g., numbers or characters).
    -   If you want to assign numbers to a variable, you use a vector in R.
    -   Notation in R: `c()`

```{r}
my_vector <- c(1,7,5,3, 3)
my_character_vector <- c("string1", "string2", "string3")
my_vector
my_character_vector
```

-   We use vectors for levels and labels within `factor()` below.

```{r}
## ORGANIZE DATA ####
data_figs = data_clean %>% 
      mutate(sex = factor(sex, levels=c("F", "M"), labels=c("female", "male")))
```

-   If you run the figure code again, you will get this figure:

```{r, fig.asp=1, fig.width=3.5}
# Proportion of 'Page's by sex (categorical predictor)
sex.plot = ggplot(data_figs, aes(x = sex, y = prop_log10)) +
geom_boxplot()
sex.plot

# To save the plot, uncomment and run: 
# ggsave('figures/boxplot_propotion_by_sex.pdf', dpi = 300)

```

-   To make the figure prettier, you could use:

    ```{r, fig.asp=0.9, fig.width=4.5}
    # Proportion of 'Page's by sex (categorical predictor)
    sex.plot = ggplot(data_figs, aes(x = sex, y = prop_log10, fill=sex))+
      geom_boxplot()+
      # choose a design
      theme_classic()+
      # Add a title
      ggtitle("Popularity of the name 'Page' by sex")+
      # Customize the y-axis (with a line break)
      ylab("Proportion of People\nlog base 10 transformed")+
      # Customize the x-axis
      xlab("Sex") +
      # Custom colours for the fill variable (sex)
      scale_fill_manual(values = c("orange", "blue"))+
      # Additional paramaters for displaying plot
      theme(text=element_text(size=10), # text size
            title=element_text(size=12), # text size for title
            legend.position="none") # no legend

    sex.plot

    # to save the plot: 
    # ggsave('figures/boxplot_propotion_by_sex.pdf', dpi = 300)
    ```

-   The figure script is done. Save it, commit to Git, and push to GitHub!

## Statistics script

## Still to Prepare

-   Include math slides into this lesson or:
-   Homework: watch Linear Regression video by Page

## References & Resources

-   Completed code for the lesson can be found [here](https://github.com/hannahmetzler/R_intro_lesson3).

This lesson is based on:

Page Piccinini (2018). "R for Publication", [Lesson 2: Linear Regression](https://pagepiccinini.com/r-course/lesson-2-linear-regression/).
